// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: snc.proto

#include "snc.pb.h"
#include "snc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace snsCoordinator {

static const char* SNSCoordinator_method_names[] = {
  "/snsCoordinator.SNSCoordinator/Login",
  "/snsCoordinator.SNSCoordinator/ServerRequest",
  "/snsCoordinator.SNSCoordinator/ServerCommunicate",
};

std::unique_ptr< SNSCoordinator::Stub> SNSCoordinator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SNSCoordinator::Stub> stub(new SNSCoordinator::Stub(channel, options));
  return stub;
}

SNSCoordinator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Login_(SNSCoordinator_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerRequest_(SNSCoordinator_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerCommunicate_(SNSCoordinator_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status SNSCoordinator::Stub::Login(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::snsCoordinator::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snsCoordinator::Request, ::snsCoordinator::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void SNSCoordinator::Stub::async::Login(::grpc::ClientContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snsCoordinator::Request, ::snsCoordinator::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void SNSCoordinator::Stub::async::Login(::grpc::ClientContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>* SNSCoordinator::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snsCoordinator::Reply, ::snsCoordinator::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>* SNSCoordinator::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSCoordinator::Stub::ServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::snsCoordinator::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snsCoordinator::Request, ::snsCoordinator::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ServerRequest_, context, request, response);
}

void SNSCoordinator::Stub::async::ServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snsCoordinator::Request, ::snsCoordinator::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ServerRequest_, context, request, response, std::move(f));
}

void SNSCoordinator::Stub::async::ServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ServerRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>* SNSCoordinator::Stub::PrepareAsyncServerRequestRaw(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snsCoordinator::Reply, ::snsCoordinator::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ServerRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>* SNSCoordinator::Stub::AsyncServerRequestRaw(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncServerRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::snsCoordinator::HeartBeat>* SNSCoordinator::Stub::ServerCommunicateRaw(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response) {
  return ::grpc::internal::ClientWriterFactory< ::snsCoordinator::HeartBeat>::Create(channel_.get(), rpcmethod_ServerCommunicate_, context, response);
}

void SNSCoordinator::Stub::async::ServerCommunicate(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::ClientWriteReactor< ::snsCoordinator::HeartBeat>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::snsCoordinator::HeartBeat>::Create(stub_->channel_.get(), stub_->rpcmethod_ServerCommunicate_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::snsCoordinator::HeartBeat>* SNSCoordinator::Stub::AsyncServerCommunicateRaw(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::snsCoordinator::HeartBeat>::Create(channel_.get(), cq, rpcmethod_ServerCommunicate_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::snsCoordinator::HeartBeat>* SNSCoordinator::Stub::PrepareAsyncServerCommunicateRaw(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::snsCoordinator::HeartBeat>::Create(channel_.get(), cq, rpcmethod_ServerCommunicate_, context, response, false, nullptr);
}

SNSCoordinator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoordinator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoordinator::Service, ::snsCoordinator::Request, ::snsCoordinator::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoordinator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snsCoordinator::Request* req,
             ::snsCoordinator::Reply* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoordinator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoordinator::Service, ::snsCoordinator::Request, ::snsCoordinator::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoordinator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snsCoordinator::Request* req,
             ::snsCoordinator::Reply* resp) {
               return service->ServerRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoordinator_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< SNSCoordinator::Service, ::snsCoordinator::HeartBeat, ::snsCoordinator::HeartBeat>(
          [](SNSCoordinator::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::snsCoordinator::HeartBeat>* reader,
             ::snsCoordinator::HeartBeat* resp) {
               return service->ServerCommunicate(ctx, reader, resp);
             }, this)));
}

SNSCoordinator::Service::~Service() {
}

::grpc::Status SNSCoordinator::Service::Login(::grpc::ServerContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoordinator::Service::ServerRequest(::grpc::ServerContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoordinator::Service::ServerCommunicate(::grpc::ServerContext* context, ::grpc::ServerReader< ::snsCoordinator::HeartBeat>* reader, ::snsCoordinator::HeartBeat* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace snsCoordinator

