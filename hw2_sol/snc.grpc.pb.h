// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: snc.proto
#ifndef GRPC_snc_2eproto__INCLUDED
#define GRPC_snc_2eproto__INCLUDED

#include "snc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace snsCoordinator {

class SNSCoordinator final {
 public:
  static constexpr char const* service_full_name() {
    return "snsCoordinator.SNSCoordinator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::snsCoordinator::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::Reply>> AsyncLogin(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::Reply>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::Reply>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::Reply>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status ServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::snsCoordinator::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::Reply>> AsyncServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::Reply>>(AsyncServerRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::Reply>> PrepareAsyncServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::Reply>>(PrepareAsyncServerRequestRaw(context, request, cq));
    }
    // Bidirectional Communication to check on server interaction
    std::unique_ptr< ::grpc::ClientWriterInterface< ::snsCoordinator::HeartBeat>> ServerCommunicate(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::snsCoordinator::HeartBeat>>(ServerCommunicateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snsCoordinator::HeartBeat>> AsyncServerCommunicate(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snsCoordinator::HeartBeat>>(AsyncServerCommunicateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snsCoordinator::HeartBeat>> PrepareAsyncServerCommunicate(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snsCoordinator::HeartBeat>>(PrepareAsyncServerCommunicateRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Login(::grpc::ClientContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Bidirectional Communication to check on server interaction
      virtual void ServerCommunicate(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::ClientWriteReactor< ::snsCoordinator::HeartBeat>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::Reply>* AsyncLoginRaw(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::Reply>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::Reply>* AsyncServerRequestRaw(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::Reply>* PrepareAsyncServerRequestRaw(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::snsCoordinator::HeartBeat>* ServerCommunicateRaw(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::snsCoordinator::HeartBeat>* AsyncServerCommunicateRaw(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::snsCoordinator::HeartBeat>* PrepareAsyncServerCommunicateRaw(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Login(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::snsCoordinator::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>> AsyncLogin(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status ServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::snsCoordinator::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>> AsyncServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>>(AsyncServerRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>> PrepareAsyncServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>>(PrepareAsyncServerRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::snsCoordinator::HeartBeat>> ServerCommunicate(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::snsCoordinator::HeartBeat>>(ServerCommunicateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::snsCoordinator::HeartBeat>> AsyncServerCommunicate(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::snsCoordinator::HeartBeat>>(AsyncServerCommunicateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::snsCoordinator::HeartBeat>> PrepareAsyncServerCommunicate(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::snsCoordinator::HeartBeat>>(PrepareAsyncServerCommunicateRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Login(::grpc::ClientContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response, std::function<void(::grpc::Status)>) override;
      void ServerRequest(::grpc::ClientContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerCommunicate(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::ClientWriteReactor< ::snsCoordinator::HeartBeat>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>* AsyncLoginRaw(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>* AsyncServerRequestRaw(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsCoordinator::Reply>* PrepareAsyncServerRequestRaw(::grpc::ClientContext* context, const ::snsCoordinator::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::snsCoordinator::HeartBeat>* ServerCommunicateRaw(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response) override;
    ::grpc::ClientAsyncWriter< ::snsCoordinator::HeartBeat>* AsyncServerCommunicateRaw(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::snsCoordinator::HeartBeat>* PrepareAsyncServerCommunicateRaw(::grpc::ClientContext* context, ::snsCoordinator::HeartBeat* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerCommunicate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response);
    virtual ::grpc::Status ServerRequest(::grpc::ServerContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response);
    // Bidirectional Communication to check on server interaction
    virtual ::grpc::Status ServerCommunicate(::grpc::ServerContext* context, ::grpc::ServerReader< ::snsCoordinator::HeartBeat>* reader, ::snsCoordinator::HeartBeat* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::snsCoordinator::Request* request, ::grpc::ServerAsyncResponseWriter< ::snsCoordinator::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ServerRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerRequest(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerRequest(::grpc::ServerContext* context, ::snsCoordinator::Request* request, ::grpc::ServerAsyncResponseWriter< ::snsCoordinator::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerCommunicate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ServerCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snsCoordinator::HeartBeat>* /*reader*/, ::snsCoordinator::HeartBeat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerCommunicate(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::snsCoordinator::HeartBeat, ::snsCoordinator::HeartBeat>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<WithAsyncMethod_ServerRequest<WithAsyncMethod_ServerCommunicate<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::snsCoordinator::Request, ::snsCoordinator::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::snsCoordinator::Request, ::snsCoordinator::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::snsCoordinator::Request, ::snsCoordinator::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerRequest() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::snsCoordinator::Request, ::snsCoordinator::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::snsCoordinator::Request* request, ::snsCoordinator::Reply* response) { return this->ServerRequest(context, request, response); }));}
    void SetMessageAllocatorFor_ServerRequest(
        ::grpc::MessageAllocator< ::snsCoordinator::Request, ::snsCoordinator::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::snsCoordinator::Request, ::snsCoordinator::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerRequest(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerCommunicate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::snsCoordinator::HeartBeat, ::snsCoordinator::HeartBeat>(
            [this](
                   ::grpc::CallbackServerContext* context, ::snsCoordinator::HeartBeat* response) { return this->ServerCommunicate(context, response); }));
    }
    ~WithCallbackMethod_ServerCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snsCoordinator::HeartBeat>* /*reader*/, ::snsCoordinator::HeartBeat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::snsCoordinator::HeartBeat>* ServerCommunicate(
      ::grpc::CallbackServerContext* /*context*/, ::snsCoordinator::HeartBeat* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Login<WithCallbackMethod_ServerRequest<WithCallbackMethod_ServerCommunicate<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ServerRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerRequest(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerCommunicate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ServerCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snsCoordinator::HeartBeat>* /*reader*/, ::snsCoordinator::HeartBeat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerRequest() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ServerRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerRequest(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerCommunicate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ServerCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snsCoordinator::HeartBeat>* /*reader*/, ::snsCoordinator::HeartBeat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerCommunicate(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerRequest() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerRequest(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerCommunicate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->ServerCommunicate(context, response); }));
    }
    ~WithRawCallbackMethod_ServerCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snsCoordinator::HeartBeat>* /*reader*/, ::snsCoordinator::HeartBeat* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* ServerCommunicate(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::snsCoordinator::Request, ::snsCoordinator::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::snsCoordinator::Request, ::snsCoordinator::Reply>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::snsCoordinator::Request,::snsCoordinator::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::snsCoordinator::Request, ::snsCoordinator::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::snsCoordinator::Request, ::snsCoordinator::Reply>* streamer) {
                       return this->StreamedServerRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerRequest(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Request* /*request*/, ::snsCoordinator::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::snsCoordinator::Request,::snsCoordinator::Reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_ServerRequest<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_ServerRequest<Service > > StreamedService;
};

}  // namespace snsCoordinator


#endif  // GRPC_snc_2eproto__INCLUDED
