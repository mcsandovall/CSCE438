// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: snf.proto
#ifndef GRPC_snf_2eproto__INCLUDED
#define GRPC_snf_2eproto__INCLUDED

#include "snf.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace snsFSynch {

class SNSFSynch final {
 public:
  static constexpr char const* service_full_name() {
    return "snsFSynch.SNSFSynch";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Contact(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::snsFSynch::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>> AsyncContact(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>>(AsyncContactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>> PrepareAsyncContact(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>>(PrepareAsyncContactRaw(context, request, cq));
    }
    // follow function to add user to following list
    virtual ::grpc::Status Follow(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::snsFSynch::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>> AsyncFollow(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>>(AsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>> PrepareAsyncFollow(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>>(PrepareAsyncFollowRaw(context, request, cq));
    }
    // timeline modifier
    virtual ::grpc::Status Timeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::snsFSynch::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>> AsyncTimeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>>(AsyncTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>> PrepareAsyncTimeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>>(PrepareAsyncTimelineRaw(context, request, cq));
    }
    // add user to all user list
    virtual ::grpc::Status NewUser(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::snsFSynch::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>> AsyncNewUser(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>>(AsyncNewUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>> PrepareAsyncNewUser(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>>(PrepareAsyncNewUserRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Contact(::grpc::ClientContext* context, const ::snsFSynch::Message* request, ::snsFSynch::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Contact(::grpc::ClientContext* context, const ::snsFSynch::Message* request, ::snsFSynch::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // follow function to add user to following list
      virtual void Follow(::grpc::ClientContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Follow(::grpc::ClientContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // timeline modifier
      virtual void Timeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg* request, ::snsFSynch::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Timeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg* request, ::snsFSynch::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // add user to all user list
      virtual void NewUser(::grpc::ClientContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewUser(::grpc::ClientContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>* AsyncContactRaw(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>* PrepareAsyncContactRaw(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>* AsyncFollowRaw(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>* PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>* AsyncTimelineRaw(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>* PrepareAsyncTimelineRaw(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>* AsyncNewUserRaw(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsFSynch::Reply>* PrepareAsyncNewUserRaw(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Contact(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::snsFSynch::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>> AsyncContact(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>>(AsyncContactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>> PrepareAsyncContact(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>>(PrepareAsyncContactRaw(context, request, cq));
    }
    ::grpc::Status Follow(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::snsFSynch::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>> AsyncFollow(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>>(AsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>> PrepareAsyncFollow(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>>(PrepareAsyncFollowRaw(context, request, cq));
    }
    ::grpc::Status Timeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::snsFSynch::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>> AsyncTimeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>>(AsyncTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>> PrepareAsyncTimeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>>(PrepareAsyncTimelineRaw(context, request, cq));
    }
    ::grpc::Status NewUser(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::snsFSynch::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>> AsyncNewUser(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>>(AsyncNewUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>> PrepareAsyncNewUser(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>>(PrepareAsyncNewUserRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Contact(::grpc::ClientContext* context, const ::snsFSynch::Message* request, ::snsFSynch::Reply* response, std::function<void(::grpc::Status)>) override;
      void Contact(::grpc::ClientContext* context, const ::snsFSynch::Message* request, ::snsFSynch::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Follow(::grpc::ClientContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response, std::function<void(::grpc::Status)>) override;
      void Follow(::grpc::ClientContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Timeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg* request, ::snsFSynch::Reply* response, std::function<void(::grpc::Status)>) override;
      void Timeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg* request, ::snsFSynch::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NewUser(::grpc::ClientContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response, std::function<void(::grpc::Status)>) override;
      void NewUser(::grpc::ClientContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* AsyncContactRaw(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* PrepareAsyncContactRaw(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* AsyncFollowRaw(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* AsyncTimelineRaw(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* PrepareAsyncTimelineRaw(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* AsyncNewUserRaw(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* PrepareAsyncNewUserRaw(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Contact_;
    const ::grpc::internal::RpcMethod rpcmethod_Follow_;
    const ::grpc::internal::RpcMethod rpcmethod_Timeline_;
    const ::grpc::internal::RpcMethod rpcmethod_NewUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Contact(::grpc::ServerContext* context, const ::snsFSynch::Message* request, ::snsFSynch::Reply* response);
    // follow function to add user to following list
    virtual ::grpc::Status Follow(::grpc::ServerContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response);
    // timeline modifier
    virtual ::grpc::Status Timeline(::grpc::ServerContext* context, const ::snsFSynch::TimelineMsg* request, ::snsFSynch::Reply* response);
    // add user to all user list
    virtual ::grpc::Status NewUser(::grpc::ServerContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Contact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Contact() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Contact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Contact(::grpc::ServerContext* /*context*/, const ::snsFSynch::Message* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContact(::grpc::ServerContext* context, ::snsFSynch::Message* request, ::grpc::ServerAsyncResponseWriter< ::snsFSynch::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Follow() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFollow(::grpc::ServerContext* context, ::snsFSynch::Request* request, ::grpc::ServerAsyncResponseWriter< ::snsFSynch::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Timeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Timeline() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Timeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Timeline(::grpc::ServerContext* /*context*/, const ::snsFSynch::TimelineMsg* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTimeline(::grpc::ServerContext* context, ::snsFSynch::TimelineMsg* request, ::grpc::ServerAsyncResponseWriter< ::snsFSynch::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewUser() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_NewUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewUser(::grpc::ServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewUser(::grpc::ServerContext* context, ::snsFSynch::Request* request, ::grpc::ServerAsyncResponseWriter< ::snsFSynch::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Contact<WithAsyncMethod_Follow<WithAsyncMethod_Timeline<WithAsyncMethod_NewUser<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Contact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Contact() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::snsFSynch::Message, ::snsFSynch::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::snsFSynch::Message* request, ::snsFSynch::Reply* response) { return this->Contact(context, request, response); }));}
    void SetMessageAllocatorFor_Contact(
        ::grpc::MessageAllocator< ::snsFSynch::Message, ::snsFSynch::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::snsFSynch::Message, ::snsFSynch::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Contact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Contact(::grpc::ServerContext* /*context*/, const ::snsFSynch::Message* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Contact(
      ::grpc::CallbackServerContext* /*context*/, const ::snsFSynch::Message* /*request*/, ::snsFSynch::Reply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Follow() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::snsFSynch::Request, ::snsFSynch::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response) { return this->Follow(context, request, response); }));}
    void SetMessageAllocatorFor_Follow(
        ::grpc::MessageAllocator< ::snsFSynch::Request, ::snsFSynch::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::snsFSynch::Request, ::snsFSynch::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Follow(
      ::grpc::CallbackServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Timeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Timeline() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::snsFSynch::TimelineMsg, ::snsFSynch::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::snsFSynch::TimelineMsg* request, ::snsFSynch::Reply* response) { return this->Timeline(context, request, response); }));}
    void SetMessageAllocatorFor_Timeline(
        ::grpc::MessageAllocator< ::snsFSynch::TimelineMsg, ::snsFSynch::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::snsFSynch::TimelineMsg, ::snsFSynch::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Timeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Timeline(::grpc::ServerContext* /*context*/, const ::snsFSynch::TimelineMsg* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Timeline(
      ::grpc::CallbackServerContext* /*context*/, const ::snsFSynch::TimelineMsg* /*request*/, ::snsFSynch::Reply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NewUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewUser() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::snsFSynch::Request, ::snsFSynch::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response) { return this->NewUser(context, request, response); }));}
    void SetMessageAllocatorFor_NewUser(
        ::grpc::MessageAllocator< ::snsFSynch::Request, ::snsFSynch::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::snsFSynch::Request, ::snsFSynch::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewUser(::grpc::ServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewUser(
      ::grpc::CallbackServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Contact<WithCallbackMethod_Follow<WithCallbackMethod_Timeline<WithCallbackMethod_NewUser<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Contact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Contact() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Contact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Contact(::grpc::ServerContext* /*context*/, const ::snsFSynch::Message* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Follow() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Timeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Timeline() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Timeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Timeline(::grpc::ServerContext* /*context*/, const ::snsFSynch::TimelineMsg* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewUser() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_NewUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewUser(::grpc::ServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Contact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Contact() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Contact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Contact(::grpc::ServerContext* /*context*/, const ::snsFSynch::Message* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContact(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Follow() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFollow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Timeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Timeline() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Timeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Timeline(::grpc::ServerContext* /*context*/, const ::snsFSynch::TimelineMsg* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTimeline(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewUser() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_NewUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewUser(::grpc::ServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Contact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Contact() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Contact(context, request, response); }));
    }
    ~WithRawCallbackMethod_Contact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Contact(::grpc::ServerContext* /*context*/, const ::snsFSynch::Message* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Contact(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Follow() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Follow(context, request, response); }));
    }
    ~WithRawCallbackMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Follow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Timeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Timeline() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Timeline(context, request, response); }));
    }
    ~WithRawCallbackMethod_Timeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Timeline(::grpc::ServerContext* /*context*/, const ::snsFSynch::TimelineMsg* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Timeline(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewUser() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewUser(::grpc::ServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Contact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Contact() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::snsFSynch::Message, ::snsFSynch::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::snsFSynch::Message, ::snsFSynch::Reply>* streamer) {
                       return this->StreamedContact(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Contact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Contact(::grpc::ServerContext* /*context*/, const ::snsFSynch::Message* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedContact(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::snsFSynch::Message,::snsFSynch::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Follow() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::snsFSynch::Request, ::snsFSynch::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::snsFSynch::Request, ::snsFSynch::Reply>* streamer) {
                       return this->StreamedFollow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Follow(::grpc::ServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::snsFSynch::Request,::snsFSynch::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Timeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Timeline() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::snsFSynch::TimelineMsg, ::snsFSynch::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::snsFSynch::TimelineMsg, ::snsFSynch::Reply>* streamer) {
                       return this->StreamedTimeline(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Timeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Timeline(::grpc::ServerContext* /*context*/, const ::snsFSynch::TimelineMsg* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTimeline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::snsFSynch::TimelineMsg,::snsFSynch::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewUser() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::snsFSynch::Request, ::snsFSynch::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::snsFSynch::Request, ::snsFSynch::Reply>* streamer) {
                       return this->StreamedNewUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewUser(::grpc::ServerContext* /*context*/, const ::snsFSynch::Request* /*request*/, ::snsFSynch::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::snsFSynch::Request,::snsFSynch::Reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Contact<WithStreamedUnaryMethod_Follow<WithStreamedUnaryMethod_Timeline<WithStreamedUnaryMethod_NewUser<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Contact<WithStreamedUnaryMethod_Follow<WithStreamedUnaryMethod_Timeline<WithStreamedUnaryMethod_NewUser<Service > > > > StreamedService;
};

}  // namespace snsFSynch


#endif  // GRPC_snf_2eproto__INCLUDED
