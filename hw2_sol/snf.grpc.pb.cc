// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: snf.proto

#include "snf.pb.h"
#include "snf.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace snsFSynch {

static const char* SNSFSynch_method_names[] = {
  "/snsFSynch.SNSFSynch/Contact",
  "/snsFSynch.SNSFSynch/Follow",
  "/snsFSynch.SNSFSynch/Timeline",
  "/snsFSynch.SNSFSynch/NewUser",
};

std::unique_ptr< SNSFSynch::Stub> SNSFSynch::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SNSFSynch::Stub> stub(new SNSFSynch::Stub(channel, options));
  return stub;
}

SNSFSynch::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Contact_(SNSFSynch_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Follow_(SNSFSynch_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Timeline_(SNSFSynch_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewUser_(SNSFSynch_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SNSFSynch::Stub::Contact(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::snsFSynch::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snsFSynch::Message, ::snsFSynch::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Contact_, context, request, response);
}

void SNSFSynch::Stub::async::Contact(::grpc::ClientContext* context, const ::snsFSynch::Message* request, ::snsFSynch::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snsFSynch::Message, ::snsFSynch::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Contact_, context, request, response, std::move(f));
}

void SNSFSynch::Stub::async::Contact(::grpc::ClientContext* context, const ::snsFSynch::Message* request, ::snsFSynch::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Contact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* SNSFSynch::Stub::PrepareAsyncContactRaw(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snsFSynch::Reply, ::snsFSynch::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Contact_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* SNSFSynch::Stub::AsyncContactRaw(::grpc::ClientContext* context, const ::snsFSynch::Message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncContactRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSFSynch::Stub::Follow(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::snsFSynch::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snsFSynch::Request, ::snsFSynch::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Follow_, context, request, response);
}

void SNSFSynch::Stub::async::Follow(::grpc::ClientContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snsFSynch::Request, ::snsFSynch::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, std::move(f));
}

void SNSFSynch::Stub::async::Follow(::grpc::ClientContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* SNSFSynch::Stub::PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snsFSynch::Reply, ::snsFSynch::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Follow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* SNSFSynch::Stub::AsyncFollowRaw(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFollowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSFSynch::Stub::Timeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::snsFSynch::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snsFSynch::TimelineMsg, ::snsFSynch::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Timeline_, context, request, response);
}

void SNSFSynch::Stub::async::Timeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg* request, ::snsFSynch::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snsFSynch::TimelineMsg, ::snsFSynch::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Timeline_, context, request, response, std::move(f));
}

void SNSFSynch::Stub::async::Timeline(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg* request, ::snsFSynch::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Timeline_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* SNSFSynch::Stub::PrepareAsyncTimelineRaw(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snsFSynch::Reply, ::snsFSynch::TimelineMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Timeline_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* SNSFSynch::Stub::AsyncTimelineRaw(::grpc::ClientContext* context, const ::snsFSynch::TimelineMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTimelineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSFSynch::Stub::NewUser(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::snsFSynch::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snsFSynch::Request, ::snsFSynch::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewUser_, context, request, response);
}

void SNSFSynch::Stub::async::NewUser(::grpc::ClientContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snsFSynch::Request, ::snsFSynch::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewUser_, context, request, response, std::move(f));
}

void SNSFSynch::Stub::async::NewUser(::grpc::ClientContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* SNSFSynch::Stub::PrepareAsyncNewUserRaw(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snsFSynch::Reply, ::snsFSynch::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snsFSynch::Reply>* SNSFSynch::Stub::AsyncNewUserRaw(::grpc::ClientContext* context, const ::snsFSynch::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

SNSFSynch::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSFSynch_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSFSynch::Service, ::snsFSynch::Message, ::snsFSynch::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSFSynch::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snsFSynch::Message* req,
             ::snsFSynch::Reply* resp) {
               return service->Contact(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSFSynch_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSFSynch::Service, ::snsFSynch::Request, ::snsFSynch::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSFSynch::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snsFSynch::Request* req,
             ::snsFSynch::Reply* resp) {
               return service->Follow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSFSynch_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSFSynch::Service, ::snsFSynch::TimelineMsg, ::snsFSynch::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSFSynch::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snsFSynch::TimelineMsg* req,
             ::snsFSynch::Reply* resp) {
               return service->Timeline(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSFSynch_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSFSynch::Service, ::snsFSynch::Request, ::snsFSynch::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSFSynch::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snsFSynch::Request* req,
             ::snsFSynch::Reply* resp) {
               return service->NewUser(ctx, req, resp);
             }, this)));
}

SNSFSynch::Service::~Service() {
}

::grpc::Status SNSFSynch::Service::Contact(::grpc::ServerContext* context, const ::snsFSynch::Message* request, ::snsFSynch::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSFSynch::Service::Follow(::grpc::ServerContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSFSynch::Service::Timeline(::grpc::ServerContext* context, const ::snsFSynch::TimelineMsg* request, ::snsFSynch::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSFSynch::Service::NewUser(::grpc::ServerContext* context, const ::snsFSynch::Request* request, ::snsFSynch::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace snsFSynch

